

/*

Alaska Railroad Company
Dispatcher Controlled Switch 
CP 1662 
Central Sub-Division

*/

MICROLOK_II PROGRAM AKV1662;
SITE.ID.STRING: "166.28";
DATE.STAMP: "JANUARY 02, 2014_V3";

/*

VERSION: Rev. 3.0
DATE: JANUARY 02, 2014
SUPERSEDES: Rev. 2.0
ORIGINAL ISSUE: March 30, 2007


Copyright 2014, Burns Engineering, Inc.
*/ /*

WARNING
TO ENSURE SAFE OPERATION OF THE SYSTEM, PRIOR TO PLACING THE APPLICATION LOGIC PROGRAM 
SET FORTH IN THIS LISTING INTO REVENUE SERVICE, BOTH THE APPLICATION LOGIC PROGRAM AND THE 
COMPLETE SYSTEM OF WHICH THIS PROGRAM IS A PART MUST BE TESTED FOR CORRECT OPERATION.
IF ANY CHANGES ARE SUBSEQUENTLY MADE TO THE APPLICATION LOGIC PROGRAM, ALL FUNCTIONS 
AFFECTED BY THOSE CHANGES MUST BE TESTED FOR CORRECT OPERATION, PRIOR TO RESUMING 
REVENUE SERVICE.
FAILURE TO TEST THE SYSTEM AS OUTLINED MAY COMPROMISE SAFE OPERATIONS.
*/ 
/*
Revision History
Project:
  CP 1662
Location:
  CP 1662, M.P. 166.28, Dispatcher Controlled Switch
Program Name:
  AKV1662 (Developed from Typical NEOS)
Original Issue:
  03/30/2007
Designer:
  Douglas Hayes
Checker:
  Bob Kocar/Todd Kunze
Date
Ver.
Description
Designed
Checked
CRC
CHKSUM
03/30/2007
1.0
Initial Design
DG
BK/TK
3CFE
01DE
10/24/2009
2.0
See Rev. Section
XRL/MJP
XRL/MLA
D4A8
E6D8
01/02/2014
3.0
 See Rev. Section
TBG/TBG
TBG/TBG

































































 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
TABLE OF CONTENTS
LOCATION LAYOUT	1
INTERFACE	1
BOARD DEFINITIONS	1
BOARD: LAMPBOARD	1
BOARD: ECODE_TRACK	1
BOARD: IN8_OUT8_1	2
BOARD: IN8_OUT8_2	2
BOARD: LCP	2
COMM	3
BIT ASSIGNMENT	4
BOOLEAN BITS	4
TIMER BITS	4
LOG BITS	5
CONSTANTS BOOLEAN	5
CONFIGURATION	6
SYSTEM	6
ADJUSTABLE	6
APPLICATION VERSION	6
USER BIT	6
LOGIC BEGIN	6
 
 
VITAL	6
PROGRAM VERIFICATION	6
TRACK CODES IN	6
TRACK CODES OUT	7
TRACK STATUS	7
OS TRACKS	7
SWITCH	8
SIGNAL CALLS	8
HGR	8
TRACK BLOCKS	8
ASR AND TIMER EQUATIONS AND STICK EQUATIONS	8
ASPECT EQUATIONS	9
LIGHTING EQUATIONS	9
PTC ASPECT MAPPING	10
LIGHT OUT AND LIGHT ENERGY EQUATIONS	10
NORTH CODE OUT EQUATIONS	11
SOUTH CODE OUT EQUATIONS	11
MISC EQUATIONS	11
 
NON-VITAL	12
INDICATIONS TO NONVITAL CPU	12
PANEL INDICATIONS	13
REVISION HISTORY	13

 











THIS PAGE LEFT BLANK INTENTIONALLY


LOCATION LAYOUT

 
 

*/
 


INTERFACE

LOCAL

//BOARD DEFINITIONS
BOARD: LAMPBOARD
ADJUSTABLE ENABLE: 1
TYPE: LAMP16
ADJUSTABLE 25 WATT MODE 1

OUTPUT:
NAG_BX,		NAY_BX,		NAR_BX,		NBG_BX,		NBY_BX,		NBR_BX,
SPARE,		SPARE,		SPARE,		SAG_BX,		SAY_BX,		SAR_BX,
SBL_BX,		SBL1_BX,	SBR_BX,		SPARE;

LAMP.OUT:
NAG_LO,		NAY_LO,		NAR_LO,		NBG_LO,		NBY_LO,		NBR_LO,
SPARE,		SPARE,		SPARE,		SAG_LO,		SAY_LO,		SAR_LO,
SBL_LO,		SBL1_LO,	SBR_LO,		SPARE;


BOARD: ECODE_TRACK
ADJUSTABLE ENABLE: 1
TYPE: ECODE.TRACK

TRACKA:
         TRACK.NAME: N
         ADJUSTABLE ENABLE: 1;
         ADJUSTABLE CODE5.SUPPORT: ALTERNATING;
         ADJUSTABLE CODEM.SUPPORT.ENABLED: 1;
         CODE.GROUP.SELECT: FREIGHT;

TRACKB:
         TRACK.NAME: SA
         ADJUSTABLE ENABLE: 1;
         ADJUSTABLE CODE5.SUPPORT: ALTERNATING;
         ADJUSTABLE CODEM.SUPPORT.ENABLED: 1;
         CODE.GROUP.SELECT: FREIGHT;



 


 
BOARD: IN8_OUT8_1
ADJUSTABLE ENABLE: 1
TYPE: IN8.OUT8

OUTPUT:
1NW_OUT,	1RW_OUT,	SMZ_OUT,	LR_OUT,
SPARE,		SPARE,		SPARE,		SPARE;

INPUT:
OST_IN,		ASRQPU_IN,	SIGLAMPS_IN,	1NWP_IN,
1RWP_IN,	1WJP_IN,	SMK_IN,		POK_IN;

 

BOARD: IN8_OUT8_2
ADJUSTABLE ENABLE: 1
TYPE: IN8.OUT8

OUTPUT:
SPARE,		SPARE,		SPARE,		SPARE,
SPARE,		MCZ_OUT,	SPARE,		SPARE;

INPUT:
NNWP_IN,	SANWP_IN,	SBNWP_IN,	SBT_IN,
CONNECTED,	SPARE,		SPARE,		SPARE;



BOARD: LCP
ADJUSTABLE ENABLE: 1  
TYPE: NV.IN32.OUT32
 
NV.OUTPUT:
NAR_PK,		NAG_PK,		SR_PK,		SG_PK,
NBR_PK,		NBG_PK,		SPARE,		SPARE,

SAT_PK,		OST_PK,		NT_PK,		SBT_PK,
OSAT_PK,	SPARE,		SPARE,		SPARE,

SPARE,		1NWC_PK,	LR_PK,		1RWC_PK,
SMK_PK,		MCK_PK,		LOK_PK,		SPARE,

SPARE,		SPARE,		SPARE,		SPARE,
SPARE,		SPARE,		SPARE,		SPARE;

NV.INPUT:
LOCAL_PZ,	NAGS_PZ,	NAGC_PZ,	SGS_PZ,
SGC_PZ,		SPARE,		SPARE,		NBGS_PZ,

NBGC_PZ,	SPARE,		SPARE,		1RWZ_PZ,
1NWZ_PZ,	SMZ_PZ,		SPARE,		SPARE,

SPARE,		SPARE,		SPARE,		SPARE,
SPARE,		SPARE,		SPARE,		SPARE,

SPARE,		SPARE,		SPARE,		SPARE,
SPARE,		SPARE,		SPARE,		SPARE;





 
COMM
	
LINK:	COMM1
ADJUSTABLE ENABLE: 1
PROTOCOL: GENISYS.SLAVE
FIXED PORT: 1;
ADJUSTABLE BAUD: 19200;
ADJUSTABLE STOPBITS: 1;
ADJUSTABLE PARITY: NONE;
ADJUSTABLE KEY.ON.DELAY: 0;
ADJUSTABLE KEY.OFF.DELAY: 0;
ADJUSTABLE STALE.DATA.TIMEOUT: 60:SEC;
ADJUSTABLE CARRIER.MODE: CONSTANT;
ADJUSTABLE POINT.POINT: 1;
ADJUSTABLE CRC.SIZE: 16;

ADDRESS: 1
ADJUSTABLE ENABLE: 1

NV.OUTPUT:
1NWK_AK,	1RWK_AK,	SPARE,		LK_AK,
NBLK_AK,	SABLK_AK,	OSBLK_AK,	SBBLK_AK,
NAGK_AK,	SGK_AK,		NBGK_AK,	SLOK_AK,
NALOK_AK,	NBLOK_AK,	ASPR_AK,	SPARE,
OSTK_AK,	SPARE,		SPARE,		NBK_AK,
SABK_AK,	SBTK_AK,	NTK_AK,		SATK_AK,
POK_AK,		SPARE,		LOK_AK,		SMK_AK,
SPARE,		SPARE,		SPARE,		SPARE,
SPARE,		SPARE,		SPARE,		NMK_AK,
SAMK_AK,	SPARE,		SPARE,		SMZK_AK,

//LCP	CONTROLS
LOCAL_AK,	NBGS_AK,	NBGC_AK,	SGS_AK,
SGC_AK,		NAGS_AK,	NAGC_AK,	1NWZ_AK,
1RWZ_AK,	SMZ_AK,		SPARE,		SPARE,
SPARE,		SPARE,		SPARE,		SPARE;

NV.INPUT:
1NWZ_AZ,	1RWZ_AZ,	SPARE,		SPARE,
SPARE,		SPARE,		SPARE,		SPARE,
NGZ_AZ,		SGZ_AZ,		SPARE,		NSTOP_AZ,
SSTOP_AZ,	SPARE,		SPARE,		SPARE,
SMZON_AZ,	SPARE,		SPARE,		MCZ_AZ,
NMK_AZ,		SAMK_AZ,	SPARE,		SPARE,
NBLZ_AZ,	SABLZ_AZ,	OSBLZ_AZ,	SBBLZ_AZ,
SMZOFF_AZ,	SPARE,		SPARE,		SPARE,
NBLSTP_AZ,	SABLSTP_AZ,	OSBLSTP_AZ,	SBBLSTP_AZ,
         SPARE,		SPARE,		SPARE,		SPARE;




	

















//BIT ASSIGNMENT
BOOLEAN BITS

SATKI1,			SATKI4,			SATKI5,			SATKI6,
SATKI7,			SATKI8,			SATKI10,		NTKI1,
NTKI4,			NTKI8,			SATKO4,			NFYR,
NAFLY,			NBFLY,			NAYLOR,			NBYLOR,
NTKI5,			NTKI6,			NTKI7,			NTKI10,
SATKO1,			SATKO8,			SATKO5,			SATKO6,
SATKO7,			NTKO1,			NTKO8,			NTKO2,
NTKO4,						NTKO6,			NTKO7,
SABKR,			SATR,			SATKR,			SAHR,
SAFYR,			SADR,			NBKR,			NTR,
NTKR,			NHR,			NDR,			NAGE,
NAYE,			NARE,			NBGE,			NBYE,
NBRE,			SAGE,			SAYE,			SARE,
SBLE,			SBL1E,			SBRE,			SLOK,
NALOK,			NBLOK,			LOK,			NAGK,
NBGK,			SGK,						NALOR,
NBLOR,			NASR,			SASR,			SSR,
NSR,			NAHGR,			NBHGR,			SAHGR,
SBHGR,			SAFLY,			SBTR,			NAFLR,
NBFLR,			SAFLR,			SBFLR,			NGZR,
SGZR,			1NWZR,			1RWZR,			1NW,
1RW,			1NWCR,			1RWCR,			LR,
OSTR,			OSTPR,			ASR_RST,		ASPR,
ASRQPU,			ASRQPU_EN,		TER,			SACSLOT,
NCSLOT,			SBTKR,			SANWP,			NNWP,
SBNWP,			NAE,			SAE,			POK,
SMK,			NAGLOR,						NARLOR,
NBGLOR,						NBRLOR,			SAGLOR,
SAYLOR,			SARLOR,			SBLLOR,			SBL1LOR,
SBRLOR,			SABLZR,			SBBLZR,			OSBLZR,
NBLZR,			CPS_STATUS,		LOCALP,			FLASH,
CONFIG.ERROR_BIT,	OUTOFSTATIONS,

         //PTC BOOLEAN BITS
 
NAGE_PTC,		SAGE_PTC,					NAYE_PTC,
         NARE_PTC,		SARE_PTC,		SAYE_PTC,		SAFLY_PTC,
         SBRE_PTC,		NBGE_PTC,		NBYE_PTC,		NBRE_PTC,
         NAFLY_PTC,		NBFLY_PTC,		SBLE_PTC,
         NAFLR_PTC,		NBFLR_PTC,		SAFLR_PTC,		SBFLR_PTC;




TIMER BITS
FIXED TER:			SET = 647:SEC		CLEAR = 0:SEC;
FIXED OSTPR:			SET = 10:SEC		CLEAR = 0:SEC;
FIXED ASRQPU_EN:		SET = 3:SEC		CLEAR = 0:SEC;
FIXED POK:			SET = 30:SEC		CLEAR = 0:SEC;
FIXED FLASH:			SET = 500:MSEC		CLEAR = 500:MSEC;

		
		

 
LOG BITS
1NWP_IN,		1RWP_IN,		1WJP_IN,		SMK_IN,
		POK_IN,
ASRQPU_IN,		1NW_OUT,		1RW_OUT,		LR_OUT,
SIGLAMPS_IN,						
		MCZ_OUT,		SMZ_OUT,		1NWZ_PZ,
1RWZ_PZ,		SMZ_PZ,			LOCAL_PZ,		NAGC_PZ,
NBGC_PZ,		SGC_PZ,			NAGS_PZ,		NBGS_PZ,
SGS_PZ,		1NWZ_AZ,		1RWZ_AZ,		NGZ_AZ,
SGZ_AZ,		SAMK_AZ,		NMK_AZ,			
		SABLZ_AZ,		SBBLZ_AZ,		NBLZ_AZ,
OSBLZ_AZ,		SABLSTP_AZ,		SBBLSTP_AZ,		NBLSTP_AZ,
OSBLSTP_AZ,		SATKI5,			NTKI5,			SATKI6,
NTKI6,		SATKI8,						NTKI10,
SACSLOT,		NCSLOT,			NTKO2,			NTKO4,
SATKO6,		NTKO6,			SATKO7,			NTKO7,
SATKO8,		NTKO8,			SABKR,			NBKR,
SATR,		SBTR,			NTR,			SATKR,
SBTKR,		NTKR,			SANWP,			SBNWP,
NNWP,		SAHR,			NHR,			SATKO5,
SAFYR,
SADR,		NDR,			SAHGR,			SBHGR,
NAHGR,		NBHGR,			SAGE,			SBLE,
NAGE,		NBGE,			SAYE,			SBL1E,
NAYE,		NBYE,			SARE,			SBRE,
NARE,		NBRE,			SAFLY,			SAFLR,
SBFLR,		NAFLR,			NBFLR,			SAE,
NAE,		SAG_LO,			SBL_LO,			NAG_LO,
NBG_LO,		SAY_LO,			SBL1_LO,		NAY_LO,
NBY_LO,		SAR_LO,			SBR_LO,			NAR_LO,
NBR_LO,		SAGLOR,			SBLLOR,			NAGLOR,
NBGLOR,		SAYLOR,			SBL1LOR,		
		SARLOR,			SBRLOR,			NARLOR,
NBRLOR,		SLOK,			LOK,			NALOK,
NBLOK,					NALOR,			NBLOR,
SGK,		NAGK,			NBGK,			SASR,
NASR,		SSR,			NSR,			NGZR,
SGZR,		1NWZR,			1RWZR,			1NW,
1RW,		1NWCR,			1RWCR,			LR,
OSTR,		OSTPR,			ASR_RST,		ASPR,
TER,		ASRQPU,			ASRQPU_EN,		POK,
SMK,		LOCALP,			SABLZR,			SBBLZR,
NBLZR,		OSBLZR,			CPS_STATUS,		CONFIG.ERROR_BIT,
LAMPBOARD.ENABLED,	SMZK_AK,		OUTOFSTATIONS,	
NTKI4,			NTKI8,			SATKO4,			NFYR,
NAFLY,			NBFLY,			NAYLOR,			NBYLOR,


         //PTC BOOLEAN BITS
 
NAGE_PTC,		SAGE_PTC,					NAYE_PTC,
         NARE_PTC,		SARE_PTC,		SAYE_PTC,		SAFLY_PTC,
         SBRE_PTC,		NBGE_PTC,		NBYE_PTC,		NBRE_PTC,
         NAFLY_PTC,		NBFLY_PTC,		SBLE_PTC,
         NAFLR_PTC,		NBFLR_PTC,		SAFLR_PTC,		SBFLR_PTC;




CONSTANTS BOOLEAN
		ONE = 1;
 		ZERO = 0;
  

 
CONFIGURATION 
SYSTEM
//ADJUSTABLE
   		ADJUSTABLE		DEBUG_PORT_ADDRESS: 1;
		ADJUSTABLE		DEBUG_PORT_BAUDRATE: 9600;
        	ADJUSTABLE		LOGIC_TIMEOUT: 1000:MSEC;

//APPLICATION VERSION
		APPLICATION.VERSION: 3;  

USER BIT

TKBLEN:		"ENABLE TRACK BLOCKING (1=ENABLED)", 1;
S2D:		"DISABLE DOWNGRADE OF NORTH CODES FOR SOUTHBOUND 2D", 0;
S3ASP:		"(SOUTHBOUND) TRANSMITS 3 ASPECT CODES TO THE NORTH", 0;
N2D:		"DISABLE DOWNGRADE OF SOUTH CODES FOR NORTBOUND 2D", 0;
N3ASP:		"(NORTHBOUND) TRANSMITS 3 ASPECT CODES TO THE SOUTH.", 0;



LOGIC BEGIN
//VITAL

//PROGRAM VERIFICATION

ASSIGN	(~CPS.ENABLE+CPS.ENABLE)*~CONFIGURE.ERROR TO CPS.ENABLE;


//TRACK CODES IN


ASSIGN	ECODE_TRACK.SA.CODE.1.IN			TO SATKI1;
ASSIGN	ECODE_TRACK.SA.CODE.4.IN			TO SATKI4;
ASSIGN	ECODE_TRACK.SA.CODE.5.IN			TO SATKI5;
ASSIGN	ECODE_TRACK.SA.CODE.6.IN			TO SATKI6;
ASSIGN	ECODE_TRACK.SA.CODE.7.IN			TO SATKI7;
ASSIGN	ECODE_TRACK.SA.CODE.8.IN			TO SATKI8;
ASSIGN	ECODE_TRACK.SA.CODE.M.IN			TO SATKI10;

ASSIGN	ECODE_TRACK.N.CODE.1.IN			TO NTKI1;
ASSIGN	ECODE_TRACK.N.CODE.4.IN			TO NTKI4;
ASSIGN	ECODE_TRACK.N.CODE.5.IN			TO NTKI5;
ASSIGN	ECODE_TRACK.N.CODE.6.IN			TO NTKI6;
ASSIGN	ECODE_TRACK.N.CODE.7.IN			TO NTKI7;
ASSIGN	ECODE_TRACK.N.CODE.8.IN			TO NTKI8; 
ASSIGN	ECODE_TRACK.N.CODE.M.IN			TO NTKI10;


 
 
//TRACK CODES OUT

ASSIGN	NTKO1						TO ECODE_TRACK.N.CODE.1.OUT;
ASSIGN	NTKO2						TO ECODE_TRACK.N.CODE.2.OUT;
ASSIGN	NTKO4						TO ECODE_TRACK.N.CODE.4.OUT;
ASSIGN	NTKO6						TO ECODE_TRACK.N.CODE.6.OUT;
ASSIGN	NTKO7						TO ECODE_TRACK.N.CODE.7.OUT;
ASSIGN	NTKO8						TO ECODE_TRACK.N.CODE.8.OUT;

ASSIGN	SATKO1						TO ECODE_TRACK.SA.CODE.1.OUT;
ASSIGN	SATKO4						TO ECODE_TRACK.SA.CODE.4.OUT; 
ASSIGN	SATKO5						TO ECODE_TRACK.SA.CODE.5.OUT;
ASSIGN	SATKO6						TO ECODE_TRACK.SA.CODE.6.OUT;
ASSIGN	SATKO7						TO ECODE_TRACK.SA.CODE.7.OUT;
ASSIGN	SATKO8						TO ECODE_TRACK.SA.CODE.8.OUT;
	
//TRACK STATUS

ASSIGN	NNWP_IN									TO NNWP;
ASSIGN	SANWP_IN								TO SANWP;
ASSIGN	SBNWP_IN								TO SBNWP;
ASSIGN	NTKI1									TO NTR;
ASSIGN	SATKI1									TO SATR;
ASSIGN	SBT_IN									TO SBTR;

ASSIGN	NTKI1*NNWP								TO NTKR;
ASSIGN	SATKI1*SANWP								TO SATKR;
ASSIGN	SBTR*SBNWP								TO SBTKR;

ASSIGN	NTKI5*NTR*NNWP								TO NBKR;
ASSIGN	SATKI5*SATR*SANWP							TO SABKR;

ASSIGN	(NTKI8+NTKI4+NTKI7)*NTR						TO NHR;
ASSIGN	(SATKI8+SATKI4+SATKI7)*SATR						TO SAHR;

ASSIGN	SATKI4									TO SAFYR;
ASSIGN	NTKI4									TO NFYR;

ASSIGN	NTKI7									TO NDR;
ASSIGN	SATKI7									TO SADR;

 
//OS TRACKS

ASSIGN	OST_IN									TO OSTR;
ASSIGN	OSTR									TO OSTPR;
 

 
//SWITCH

ASSIGN	~1RWZ_AZ*1NWZ_AZ*(LR+LOCALP)+~1RWZR*1NWZR				TO 1NWZR;
ASSIGN	~1NWZ_AZ*1RWZ_AZ*(LR+LOCALP)+~1NWZR*1RWZR				TO 1RWZR;

ASSIGN	~1RWCR*1WJP_IN*1NWZR*~1RWZR*1NWP_IN*~1RWP_IN				TO 1NWCR;
ASSIGN	~1NWCR*1WJP_IN*1RWZR*~1NWZR*1RWP_IN*~1NWP_IN				TO 1RWCR;

ASSIGN	1NWZR*~1RWZR*LR*~1NWCR							TO 1NW;
ASSIGN	1RWZR*~1NWZR*LR*~1RWCR							TO 1RW;

ASSIGN	1NW*~1RW								TO 1NW_OUT;
ASSIGN	1RW*~1NW								TO 1RW_OUT;

ASSIGN	~NGZR*~SGZR*NASR*SASR*OSTPR 						TO LR;

ASSIGN	LR*~1NWCR*~1RWCR							TO LR_OUT;

//SIGNAL CALLS

ASSIGN	(NGZ_AZ+NGZR)*~NSTOP_AZ*(OSTPR+LOCALP)				TO NGZR;
ASSIGN	(SGZ_AZ+SGZR)*~SSTOP_AZ*(OSTPR+LOCALP)				TO SGZR;


//HGR

ASSIGN SGZR*NASR*~NGZR*OSTPR*SAHR*SANWP*1NWCR*~1RWCR*~LR*(~SABLZR*~OSBLZR)		TO SAHGR;
ASSIGN SGZR*NASR*~NGZR*OSTPR*SBTR*SBNWP*~1NWCR*1RWCR*~LR*(~SBBLZR*~OSBLZR)		TO SBHGR;
ASSIGN NGZR*SASR*~SGZR*OSTPR*NHR*NNWP*1NWCR*~1RWCR*~LR*(~NBLZR*~OSBLZR)		TO NAHGR;
ASSIGN NGZR*SASR*~SGZR*OSTPR*NHR*NNWP*~1NWCR*1RWCR*~LR*(~NBLZR*~OSBLZR)		TO NBHGR;


//TRACK BLOCKS

ASSIGN	((OSBLZ_AZ*SASR*NASR+OSBLZR)*~OSBLSTP_AZ+~ASR_RST)*TKBLEN		TO OSBLZR;
ASSIGN	((NBLZ_AZ*NASR+NBLZR)*~NBLSTP_AZ+~ASR_RST)*TKBLEN			TO NBLZR;
ASSIGN	((SABLZ_AZ*(SASR+1RWCR)+SABLZR)*~SABLSTP_AZ+~ASR_RST)*TKBLEN	TO SABLZR;
ASSIGN	((SBBLZ_AZ*(SASR+1NWCR)+SBBLZR)*~SBBLSTP_AZ+~ASR_RST)*TKBLEN	TO SBBLZR;


//ASR AND TIMER EQUATIONS AND STICK EQUATIONS

ASSIGN	OSTPR+ASR_RST								TO ASR_RST;
ASSIGN	ASRQPU_IN								TO ASRQPU_EN;
ASSIGN	ASRQPU_IN*~ASRQPU_EN*LOCALP*~NGZR*~SGZR				TO ASRQPU;
ASSIGN	~SAHGR*~SBHGR*(OSTPR*(ASRQPU+TER)+
~OSTPR*ASR_RST*(1NWCR*~SATR+1RWCR*~SBTR)+SASR)			TO SASR;

ASSIGN	~NAHGR*~NBHGR*(OSTPR*(ASRQPU+TER)+
~OSTPR*ASR_RST*~NTR+NASR)						TO NASR; 

ASSIGN	(~NAHGR*~NBHGR*~NASR*SASR+
~SAHGR*~SBHGR*~SASR)*OSTPR*~NGZR*~SGZR				TO ASPR;
ASSIGN	ASPR									TO TER;
ASSIGN	SASR*(OSTPR+SSR)							TO SSR;
ASSIGN	NASR*(OSTPR+NSR)							TO NSR;
ASSIGN	(SSR+1RWCR+~SSR*~OSTPR*1WJP_IN*SACSLOT)*SANWP			TO SACSLOT;
ASSIGN	NSR*NNWP								TO NCSLOT;



//ASPECT EQUATIONS

ASSIGN	SADR*SAHGR*SAGLOR							TO SAGE;
ASSIGN	NDR*NAHGR*NAGLOR*NBLOR							TO NAGE;
ASSIGN	NDR*NBHGR*NBGLOR*NALOR							TO NBGE;

ASSIGN	NHR*NAHGR*~NAGE*NAYLOR*NBLOR						TO NAYE;
ASSIGN	NHR*NBHGR*~NBGE*NBYLOR*NALOR						TO NBYE;

ASSIGN	SAHR*SAHGR*~SAGE*SAYLOR						TO SAYE;

ASSIGN	~SAGE*~SAYE*SARLOR							TO SARE;
ASSIGN	~NAGE*~NAYE*NARLOR							TO NARE;
ASSIGN	~NBGE*~NBYE*NBRLOR							TO NBRE;

ASSIGN	SBHGR*SBLLOR								TO SBLE;

ASSIGN	SBHGR*~SBLE*SBL1LOR							TO SBL1E;

ASSIGN	~SBLE*~SBL1E*SBRLOR							TO SBRE;

ASSIGN	(SAFYR+SADR*~SAGE)*SAHGR*SAYE						TO SAFLY;
ASSIGN	(NFYR+NDR*~NAGE)*NAHGR*NAYE						TO NAFLY;
ASSIGN	(NFYR+NDR*~NBGE)*NBHGR*NBYE						TO NBFLY; 
ASSIGN	(SAHGR*~SAGE*~SAYE+SBHGR*~SBLE*~SBL1E*~SBRE)*SARE			TO SAFLR;
ASSIGN	(SAHGR*~SAGE*~SAYE*~SARE+SBHGR*~SBLE*~SBL1E)*SBRE			TO SBFLR;
ASSIGN	NAHGR*~NAGE*~NAYE*NARE							TO NAFLR;
ASSIGN	NBHGR*~NBGE*~NBYE*NBRE							TO NBFLR;

	

//LIGHTING EQUATIONS


ASSIGN	NAE*NAGE								TO NAG_BX;
ASSIGN	NAE*NAYE*(~NAFLY+FLASH)						TO NAY_BX;
ASSIGN	NAE*NBGE								TO NBG_BX;
ASSIGN	NAE*NBYE*(~NBFLY+FLASH)						TO NBY_BX;
ASSIGN	NAE*NBRE*(~NBFLR+FLASH)						TO NBR_BX;

ASSIGN	SAE*SAGE								TO SAG_BX;
ASSIGN	SAE*SAYE*(~SAFLY+FLASH)						TO SAY_BX;
ASSIGN	SAE*SARE*(~SAFLR+FLASH)						TO SAR_BX;

ASSIGN	SAE*SBLE								TO SBL_BX;
ASSIGN	SAE*SBL1E								TO SBL1_BX;
ASSIGN	SAE*SBRE*(~SBFLR+FLASH)						TO SBR_BX;

ASSIGN	NAE*NARE*(~NAFLR+FLASH)						TO NAR_BX;


 
//PTC ASPECT MAPPING
 
ASSIGN	SAGE									TO SAGE_PTC;
ASSIGN 	SAYE*~SAFLY								TO SAYE_PTC;	 
ASSIGN 	SAYE*SAFLY								TO SAFLY_PTC;
ASSIGN 	SARE*~SAFLR								TO SARE_PTC;
ASSIGN 	SARE*SAFLR								TO SAFLR_PTC;

ASSIGN 	SBLE+SBL1E								TO SBLE_PTC;	 
ASSIGN 	SBRE*~SBFLR								TO SBRE_PTC;
ASSIGN 	SBRE*SBFLR								TO SBFLR_PTC;

ASSIGN	NAGE									TO NAGE_PTC;
ASSIGN 	NAYE*~NAFLY								TO NAYE_PTC;	 
ASSIGN 	NAYE*NAFLY								TO NAFLY_PTC;
ASSIGN 	NARE*~NAFLR								TO NARE_PTC;
ASSIGN 	NARE*NAFLR								TO NAFLR_PTC;

ASSIGN	NBGE									TO NBGE_PTC;
ASSIGN 	NBYE*~NBFLY								TO NBYE_PTC;	 
ASSIGN 	NBYE*NBFLY								TO NBFLY_PTC;
ASSIGN 	NBRE*~NBFLR								TO NBRE_PTC;
ASSIGN 	NBRE*NBFLR								TO NBFLR_PTC;



//LIGHT OUT AND LIGHT ENERGY EQUATIONS

ASSIGN	~NAG_LO*LAMPBOARD.ENABLED*CPS.STATUS				TO NAGLOR;
ASSIGN	~NAY_LO*LAMPBOARD.ENABLED*CPS.STATUS				TO NAYLOR;
ASSIGN	~NAR_LO*LAMPBOARD.ENABLED*CPS.STATUS				TO NARLOR;

ASSIGN	~NBG_LO*LAMPBOARD.ENABLED*CPS.STATUS				TO NBGLOR;
ASSIGN	~NBY_LO*LAMPBOARD.ENABLED*CPS.STATUS				TO NBYLOR; 
ASSIGN	~NBR_LO*LAMPBOARD.ENABLED*CPS.STATUS				TO NBRLOR;

ASSIGN	~SAG_LO*LAMPBOARD.ENABLED*CPS.STATUS				TO SAGLOR;
ASSIGN	~SAY_LO*LAMPBOARD.ENABLED*CPS.STATUS				TO SAYLOR;
ASSIGN	~SAR_LO*LAMPBOARD.ENABLED*CPS.STATUS				TO SARLOR;

ASSIGN	~SBL_LO*LAMPBOARD.ENABLED*CPS.STATUS				TO SBLLOR;
ASSIGN	~SBL1_LO*LAMPBOARD.ENABLED*CPS.STATUS				TO SBL1LOR;
ASSIGN	~SBR_LO*LAMPBOARD.ENABLED*CPS.STATUS				TO SBRLOR;

ASSIGN	NAGE+NAYE+NARE							TO NALOR;
ASSIGN	NBGE+NBYE+NBRE							TO NBLOR;

ASSIGN	SAGLOR*SAYLOR*SARLOR*SBLLOR*SBL1LOR*SBRLOR			TO SLOK;
ASSIGN	NAGLOR*NAYLOR*NARLOR						TO NALOK;
ASSIGN	NBGLOR*NBYLOR*NBRLOR						TO NBLOK;
ASSIGN	SLOK*NALOK*NBLOK						TO LOK;



//NORTH CODE OUT EQUATIONS

ASSIGN	ONE									TO NTKO1;
ASSIGN	SBHGR*(SBLE+SBL1E)*NCSLOT						TO NTKO2;
ASSIGN	(SAFLY*~S2D+(~SAFLY*S2D))*SAYE*~S3ASP *NCSLOT			TO NTKO4;
ASSIGN	~NCSLOT									TO NTKO6;
ASSIGN	(SAGE+(SAFLY*(S2D+S3ASP)+S3ASP*S2D)*SAYE)*NCSLOT			TO NTKO7;
ASSIGN	~NTKO7*~NTKO4*~NTKO2*NCSLOT						TO NTKO8;


//SOUTH CODE OUT EQUATIONS

ASSIGN	ONE									TO SATKO1;
ASSIGN	(~NAFLY*N2D+NAFLY*~N2D)*NAYE*~N3ASP*SACSLOT				TO SATKO4;
ASSIGN	SANWP									TO SATKO5;
ASSIGN	~SACSLOT								TO SATKO6;
ASSIGN	(NAGE+(NAFLY*(N2D+N3ASP)+N3ASP*N2D)*NAYE)*SACSLOT			TO SATKO7;
ASSIGN	~SATKO7*~SATKO4*SACSLOT						TO SATKO8;

//MISC EQUATIONS

ASSIGN	POK_IN									TO POK;
ASSIGN	(~NASR+~SASR)*POK+~SAHR+~SATR+~SBTR+~SIGLAMPS_IN			TO NAE;
ASSIGN	(~NASR+~SASR)*POK+~NHR+~NTR+~SIGLAMPS_IN				TO SAE;
ASSIGN	SMZON_AZ+~SMZOFF_AZ*SMZ_OUT						TO SMZ_OUT;
ASSIGN	MCZ_AZ									TO MCZ_OUT;
ASSIGN	SMK_IN									TO SMK;
ASSIGN	SAGE+SAYE+SAFLR+SBLE+SBL1E+SBFLR					TO SGK;
ASSIGN	NAGE+NAYE+NAFLY+NAFLR							TO NAGK;
ASSIGN	NBGE+NBYE+NBFLY+NBFLR							TO NBGK;
ASSIGN	LOCAL_PZ								TO LOCALP;
ASSIGN	~FLASH									TO FLASH;

NV.ASSIGN	NBLZ_AZ*FLASH+NBLK_AK						TO LED.1;
NV.ASSIGN	SABLZ_AZ*FLASH+SABLK_AK					TO LED.2;
NV.ASSIGN	SBBLZ_AZ*FLASH+SBBLK_AK					TO LED.3;
NV.ASSIGN	OSBLZ_AZ*FLASH+OSBLK_AK					TO LED.4;
 
//NON-VITAL
//INDICATIONS TO NONVITAL CPU

NV.ASSIGN	SABKR								TO SABK_AK;
NV.ASSIGN	NBKR								TO NBK_AK;

NV.ASSIGN	SBTKR								TO SBTK_AK;

NV.ASSIGN	SGK								TO SGK_AK;
NV.ASSIGN	NAGK								TO NAGK_AK;
NV.ASSIGN	NBGK								TO NBGK_AK;

NV.ASSIGN	LR								TO LK_AK;
NV.ASSIGN	1NWCR								TO 1NWK_AK;
NV.ASSIGN	1RWCR								TO 1RWK_AK;
NV.ASSIGN	ASPR								TO ASPR_AK;

NV.ASSIGN	OSTPR								TO OSTK_AK;
NV.ASSIGN	LOK								TO LOK_AK;

NV.ASSIGN	POK_IN								TO POK_AK;

NV.ASSIGN	SMK								TO SMK_AK;
NV.ASSIGN	SMZ_OUT								TO SMZK_AK;

NV.ASSIGN	SATKI10								TO SAMK_AK;
NV.ASSIGN	NTKI10								TO NMK_AK;

NV.ASSIGN	LOCALP								TO LOCAL_AK;
NV.ASSIGN	NBGS_PZ								TO NBGS_AK;
NV.ASSIGN	NBGC_PZ								TO NBGC_AK;
NV.ASSIGN	NAGS_PZ								TO NAGS_AK;
NV.ASSIGN	NAGC_PZ								TO NAGC_AK;
NV.ASSIGN	SGS_PZ								TO SGS_AK;
NV.ASSIGN	SGC_PZ								TO SGC_AK;
NV.ASSIGN	1RWZ_PZ								TO 1RWZ_AK;
NV.ASSIGN	1NWZ_PZ								TO 1NWZ_AK;
NV.ASSIGN	SMZ_PZ								TO SMZ_AK;
NV.ASSIGN	SABLZR								TO SABLK_AK;
NV.ASSIGN	SBBLZR								TO SBBLK_AK;
NV.ASSIGN	NBLZR								TO NBLK_AK;
NV.ASSIGN	OSBLZR								TO OSBLK_AK;





 
//PANEL INDICATIONS

NV.ASSIGN	(1NWZR*(1NWCR+FLASH)+~1NWZR*1NWCR*FLASH)			TO 1NWC_PK;

NV.ASSIGN	(1RWZR*(1RWCR+FLASH)+ ~1RWZR*1RWCR*FLASH)			TO 1RWC_PK;

NV.ASSIGN	(FLASH*NGZR*1NWZR+NAGK)					TO NAG_PK;
NV.ASSIGN	(FLASH+(~ASPR+1RWZR)*NALOK)*~NAGK*(~NGZR+1RWZR)		TO NAR_PK;

NV.ASSIGN	(FLASH*NGZR*1RWZR+NBGK)					TO NBG_PK;
NV.ASSIGN	(FLASH+(~ASPR+1NWZR)*NBLOK)*~NBGK*(~NGZR+1NWZR)		TO NBR_PK;
 
NV.ASSIGN	(FLASH*SGZR+SGK)						TO SG_PK;
NV.ASSIGN	(FLASH+~ASPR*SLOK)*~SGK*~SGZR					TO SR_PK;

NV.ASSIGN	(~NBKR+NBKR*NMK_AZ*FLASH)					TO NT_PK;
NV.ASSIGN	(~SABKR+SABKR*SAMK_AZ*FLASH)					TO SAT_PK;
NV.ASSIGN	~SBTKR								TO SBT_PK;

NV.ASSIGN	~OSTPR								TO OST_PK, OSAT_PK;

NV.ASSIGN	~LOK*FLASH							TO LOK_PK;
NV.ASSIGN	MCZ_AZ*FLASH							TO MCK_PK;
NV.ASSIGN	SMK								TO SMK_PK;

NV.ASSIGN	~LR								TO LR_PK;


END LOGIC
END PROGRAM 
 
/*

REVISION HISTORY

REVISION HISTORY
VERSION #1:

VERSION #2:
REVISED SNOWMELTER EQUATIONS; REMOVED NORTHBOUND YELLOW ASPECTS AND ADDED RESERVE GREEN 
NORTHBOUND ASPECTS.
CAS SOFTWARE ADDITIONS, APPLICATION VERSION #, SITE.ID #
XRL/MJP

VERSION #3: 01-02-14
ADDED NORTHBOUND YELLOW ASPECTS, MODIFIED SOUTHBOUND OUT CODES,
& ADDED PTC BITS.
DESIGNED: TBG/TBG	CHECKED: TBG/TBG


*/




 	                                                                   /*Alaska Railroad Dispatcher Controlled Switch CP 1662*/
													
/*AKV1662	Revision 3.0	January 02, 2014*/

 		
		
		
/*AKV1662	Revision 3.0	January  02, 2014*/
 		                                                                          /*Alaska Railroad Dispatcher Controlled Switch CP 1662*/
/*AKV1662	Revision 3.0	 Page i*/
													
/*AKV1662	Revision 3.0	Page 13 of 13*/

 
 	                                                                   /*Alaska Railroad Dispatcher Controlled Switch CP 1662*/
													
/*AKV1662	Revision 4.0	 Page 1 of 13*/


